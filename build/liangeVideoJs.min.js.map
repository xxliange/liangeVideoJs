{"version":3,"sources":["liangeVideoJs.js"],"names":["global","factory","exports","module","define","amd","self","liangeVideoJs","this","querySelectorAll","selector","result","document","HTMLCollection","NodeList","DomElement","html","div","nodeType","selectorResult","replace","trim","indexOf","createElement","innerHTML","children","length","i","$","Event","video","VideoDom","PlayCon","$elem","$font","append","isPlay","type","$playFont","Voice","TimeText","$durationTime","$playTime","$line","Loop","Speed","FullScreen","isFull","$fullFont","ProgressBar","prototype","forEach","fn","elem","call","on","types","split","addEventListener","e","target","matches","get","num","addClass","className","arr","filter","item","push","join","removeClass","splice","css","key","val","currentStyle","style","getAttribute","resultArr","map","setAttribute","$children","child","appendChild","innerText","text","getVideoEvent","el","play","pause","_video","$videoElm","fullScreen","$selector","_requestFullScreen","elemt","requestMethod","requestFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullScreen","exitFullscreen","_init","_this","$event","duration","durationTime","_time2minute","playTime","setInterval","currentTime","console","log","time","second","parseInt","constructor","onClick","E","ControlsConstructors","objForEach","obj","hasOwnProperty","Controls","controls","playCon","voice","timeText","loop","speed","progressBar","init","config","controlsKey","ControlsConstructor","_addToControlBar","_bindEvent","$videoControls","$controlsBar","$controlsMain","$controlsProgress","control","width","height","url","title","videoId","Video","Error","id","_initConfig","Object","assign","_config2","_initDom","$titleElm","window","keyCode","_initVideo","videoEl","_initControls","create","error"],"mappings":"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","file":"liangeVideoJs.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = global || self, global.liangeVideoJs = factory());\n}(this, (function () { 'use strict';\n\n    /**\n     * \n     * DOM 操作\n     * \n     */\n\n    /**\n     * \n     * @param {Element} html \n     */\n    function createElemByHTML(html) {\n        var div = void 0;\n        div = document.createElement('div');\n        div.innerHTML = html;\n        return div.children;\n    }\n\n    // 判断是否是domList\n    function isDomList(selector) {\n        if (!selector) return false;\n        if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n            return true;\n        }\n        return false;\n    }\n\n    // 元素选择器\n    function querySelectorAll(selector) {\n        var result = document.querySelectorAll(selector);\n        if (isDomList(result)) {\n            return result;\n        } else {\n            return [result];\n        }\n    }\n\n    // 创建构造函数\n\n    /**\n     * \n     * @param {Object} selector \n     */\n    function DomElement(selector) {\n\n        if (!selector) return;\n\n        // selector 本来就是DomElement对象 直接返回\n        if (selector instanceof DomElement) return selector;\n\n        this.selector = selector;\n        var nodeType = selector.nodeType;\n\n        // 根据selector 得出的结果 (如 DOM DOM list)\n        var selectorResult = [];\n        if (nodeType === 9) {\n            // document 节点\n            selectorResult = [selector];\n        } else if (nodeType === 1) {\n            // 单个dom节点\n            selectorResult = [selector];\n        } else if (typeof selector === 'string') {\n            // 字符串\n            selector = selector.replace('/\\n/mg', '').trim(); //字符串去空\n            if (selector.indexOf('<') === 0) {\n                // 比如<div>\n                selectorResult = createElemByHTML(selector);\n            } else {\n                // 如 # . 选择器\n                selectorResult = querySelectorAll(selector);\n            }    }\n        var length = selectorResult.length;\n        if (!length) return this; //空数组\n\n        for (var i = 0; i < length; i++) {\n            this[i] = selectorResult[i];\n        }    this.length = length;\n    }\n    DomElement.prototype = {\n\n        /**\n         * \n         * @param {function} fn \n         */\n        forEach: function forEach(fn) {\n            for (var i = 0; i < this.length; i++) {\n                var elem = this[i];\n                var result = fn.call(elem, elem, i);\n                if (result === false) {\n                    break;\n                }\n            }        return this;\n        },\n        // 绑定事件\n        on: function on(type, selector, fn) {\n            if (!fn) {\n                fn = selector;\n                selector = null;\n            }\n            // type是否有多个\n            var types = [];\n            types = type.split(/\\s+/);\n\n            return this.forEach(function (elem) {\n                types.forEach(function (type) {\n                    if (!type) return;\n                    if (!selector) {\n                        elem.addEventListener(type, fn);\n                        return;\n                    }\n                    elem.addEventListener(type, function (e) {\n                        var target = e.target;\n                        if (target.matches(selector)) {\n                            fn.call(target, e);\n                        }\n                    });\n                });\n            });\n        },\n\n        // 获取子节点\n        children: function children() {\n            var elem = this[0];\n            if (!elem) {\n                return null;\n            }        return $(elem.children);\n        },\n\n        // 获取第几个元素\n        /**\n         * \n         * @param {number} num \n         * 获取第几个元素\n         */\n        get: function get(num) {\n            var length = this.length;\n            if (num >= length) {\n                num = num % length;\n            }        return $(this[num]);\n        },\n\n        /**\n         * \n         * @param {string} className\n         * 需要添加的类名\n         */\n\n        // 添加class\n        addClass: function addClass(className) {\n            if (!className) return this;\n            return this.forEach(function (elem) {\n                var arr = void 0;\n                if (elem.className) {\n                    arr = elem.className.split(/\\s/);\n                    arr = arr.filter(function (item) {\n                        return !!item.trim();\n                    });\n                    if (arr.indexOf(className) < 0) {\n                        arr.push(className);\n                    }                elem.className = arr.join(' ');\n                } else {\n                    elem.className = className;\n                }\n            });\n        },\n\n        /**\n         * \n         * @param {string} className \n         * 移除类名\n         */\n\n        // 移除class\n        removeClass: function removeClass(className) {\n            if (!className) return this;\n            return this.forEach(function (elem) {\n                var arr = void 0,\n                    i = void 0;\n                arr = elem.className.split(/\\s/);\n                for (i = 0; i < arr.length; i += 1) {\n                    var name = arr[i];\n                    if (name === className) {\n                        arr.splice(i, 1);\n                    }\n                }            elem.className = arr.join(' ');\n            });\n        },\n\n        /**\n         * \n         * @param {string} key \n         * @param {string} val\n         * \n         * key 是需要修改样式名 val 是需要修改样式内容 \n         */\n        // 修改css\n        css: function css(key, val) {\n            var currentStyle = key + ':' + val;\n            return this.forEach(function (elem) {\n                var style = (elem.getAttribute('style') || '').trim();\n                var styleArr = void 0,\n                    resultArr = [];\n                if (style) {\n                    styleArr = style.split(';');\n                    styleArr.forEach(function (item) {\n                        var arr = item.split(':').map(function (i) {\n                            return i.trim();\n                        });\n                        if (arr.length === 2) {\n                            resultArr.push(arr[0] + ':' + arr[1]);\n                        }                });\n                    resultArr = resultArr.map(function (item) {\n                        if (item.indexOf(key) === 0) {\n                            return currentStyle;\n                        } else {\n                            return item;\n                        }\n                    });\n                    if (resultArr.indexOf(currentStyle) < 0) {\n                        resultArr.push(currentStyle);\n                    }                elem.setAttribute('style', resultArr.join('; '));\n                } else {\n                    elem.setAttribute('style', currentStyle);\n                }\n            });\n        },\n\n        /**\n         * \n         * @param {object} $children \n         * 需要添加的子节点\n         */\n        // 添加子节点\n        append: function append($children) {\n            return this.forEach(function (elem) {\n                $children.forEach(function (child) {\n                    elem.appendChild(child);\n                });\n            });\n        },\n\n        /**\n         * \n         * @param {string} text \n         *  需要渲染的文字\n         */\n        innerText: function innerText(text) {\n            return this.forEach(function (elem) {\n                if (!text) return;\n                elem.innerText = text;\n            });\n        },\n\n        // 获取video对象\n        getVideoEvent: function getVideoEvent() {\n            var el = null;\n            this.forEach(function (elem) {\n                if (elem !== null) {\n                    el = elem;\n                }\n            });\n            return el;\n        },\n\n        // 视频播放\n        play: function play() {\n            return this.forEach(function (elem) {\n                elem.play();\n            });\n        },\n\n        // 视频暂停\n        pause: function pause() {\n            return this.forEach(function (elem) {\n                elem.pause();\n            });\n        }\n    };\n\n    function $(selector) {\n        return new DomElement(selector);\n    }\n\n    /**\n     * video - event\n     * 视频所有的操作事件\n     */\n\n    // 构造函数\n\n    /**\n     * \n     * @param {Object} video \n     * 视频对象 所要操作的对象\n     */\n\n    function Event(video) {\n        this.video = video;\n    }\n    Event.prototype = {\n        // 视频播放\n        play: function play() {\n            var _video = this.video,\n                $videoElm = _video.$videoElm,\n                isPlay = _video.isPlay,\n                $playFont = _video.$playFont;\n\n            if (isPlay) {\n                $videoElm.pause();\n                $playFont.removeClass('icon-timeout');\n                $playFont.addClass('icon-play-circle');\n                isPlay = false;\n            } else {\n                $playFont.removeClass('icon-play-circle');\n                $playFont.addClass('icon-timeout');\n                $videoElm.play();\n                isPlay = true;\n            }        video.isPlay = isPlay;\n        },\n\n        // 全屏\n        fullScreen: function fullScreen() {\n            var video = this.video;\n            var $selector = video.$selector,\n                isFull = video.isFull,\n                $fullFont = video.$fullFont;\n\n            this._requestFullScreen($selector.get(0)[0], isFull);\n            if (isFull) {\n                $fullFont.addClass('icon-fullscreen');\n                $fullFont.removeClass('icon-fullscreen-exit');\n                isFull = false;\n            } else {\n                $fullFont.addClass('icon-fullscreen-exit');\n                $fullFont.removeClass('icon-fullscreen');\n                isFull = true;\n            }\n            video.isFull = isFull;\n        },\n        _requestFullScreen: function _requestFullScreen(elemt, isFull) {\n            var requestMethod = elemt.requestFullScreen || //w3c\n            elemt.webkitRequestFullScreen || //firfox\n            elemt.mozRequestFullScreen || //chorme\n            elemt.msRequestFullScreen; //ie11\n            if (requestMethod) {\n                if (!isFull) {\n                    requestMethod.call(elemt);\n                } else {\n                    document.exitFullscreen();\n                }\n            }    }\n    };\n\n    function E(video) {\n        return new Event(video);\n    }\n\n    /**\n     *  video 元素\n     */\n\n    function VideoDom(video) {\n        this.video = video;\n    }\n    /**\n     * @param {object} video \n     *  video 对象\n     */\n\n    VideoDom.prototype = {\n        _init: function _init() {\n            var _this = this;\n\n            var video = this.video;\n            var $videoElm = video.$videoElm;\n\n            this.$event = $videoElm.getVideoEvent();\n            $videoElm.on('loadedmetadata', function () {\n                var duration = _this.$event.duration;\n\n                var durationTime = _this._time2minute(duration);\n                video.$durationTime.innerText(durationTime);\n            });\n            $videoElm.on('play', function () {\n                _this.playTime = setInterval(function () {\n                    video.$playTime.innerText(_this._time2minute(_this.$event.currentTime));\n                }, 1000);\n            });\n            $videoElm.on('ended', function () {\n                console.log('end');\n            });\n\n            // 保存属性\n            video.playTime = this.playTime;\n        },\n\n        _time2minute: function _time2minute(time) {\n            var second = parseInt(time % 60),\n                minute = parseInt(time / 60);\n            if (second < 10) {\n                second = '0' + second;\n            }\n            var durationTime = minute + ':' + second;\n            return durationTime;\n        }\n\n    };\n\n    /**\n     * controls - playCon \n     * 播放暂停按钮\n     */\n\n    //  构造函数\n    function PlayCon(video) {\n        this.video = video;\n        this.$elem = $('\\n        <div class=\\'l-c-playCon\\'>\\n\\n        </div>\\n    ');\n        this.$font = $('\\n        <i class=\\'iconfont icon-play-circle\\' />\\n    ');\n        this.$elem.append(this.$font);\n        this.isPlay = false;\n        this.type = 'click';\n\n        video.$playFont = this.$font;\n    }\n    // 修改原型\n    PlayCon.prototype = {\n\n        constructor: PlayCon,\n\n        // 点击事件\n        onClick: function onClick() {\n            var video = this.video;\n\n            video.E.play();\n        }\n    };\n\n    /**\n     * controls - voice\n     * 声音调节\n     */\n\n    // 构造函数\n    /**\n     * \n     * @param {object} video \n     * video对象\n     */\n    function Voice(video) {\n        this.video = video;\n        this.$elem = $('\\n        <div class=\\'l-c-video\\'>\\n            <i class=\\'iconfont icon-sound\\' />\\n        </div>\\n    ');\n    }\n    Voice.prototype = {\n        constructor: Voice\n    };\n\n    /**\n     * controls - timeText \n     * 视频时间显示\n     */\n\n    // 构造函数\n    /**\n     * \n     * @param {Object} video \n     * video 对象\n     */\n    function TimeText(video) {\n        this.video = video;\n        this.$durationTime = $('\\n        <p> 0:00 </p>\\n    ');\n        this.$playTime = $('\\n        <p> 0:00 </p>\\n    ');\n        this.$line = $('<p> / </p>');\n        this.$elem = $('\\n        <div class=\\'l-c-timeText\\'></div>\\n    ');\n        this.$elem.append(this.$playTime).append(this.$line).append(this.$durationTime);\n\n        video.$durationTime = this.$durationTime;\n        video.$playTime = this.$playTime;\n    }\n    TimeText.prototype = {\n        constructor: TimeText\n    };\n\n    /**\n     * controls - loop\n     * 循环播放\n     */\n\n    // 构造函数\n    /**\n     * \n     * @param {Object} video \n     * video 对象\n     */\n    function Loop(video) {\n        this.video = video;\n        this.$elem = $('\\n        <div class=\\'l-c-loop\\'>\\n            <i class=\\'iconfont icon-repeat\\' />\\n        </div>\\n    ');\n    }\n    // 修改原型\n    Loop.prototype = {\n        constructor: Loop\n    };\n\n    /**\n     * controls - speed\n     * 播放速度\n     */\n\n    // 构造函数\n    /**\n     * \n     * @param {Object} video \n     * video 对象\n     */\n    function Speed(video) {\n        this.video = video;\n        this.$elem = $('\\n        <div class=\\'l-c-speed\\'> x1 </div> \\n    ');\n    }\n    // 修改原型\n    Speed.prototype = {\n        constructor: Speed\n    };\n\n    /**\n     * controls - fullScreen\n     * 视频全屏\n     */\n\n    // 构造函数\n    /**\n     * \n     * @param {Object} video \n     * video 对象\n     */\n    function FullScreen(video) {\n        this.video = video;\n        this.$elem = $('\\n        <div class=\\'l-g-fullScreen\\'>\\n        </div>\\n    ');\n        this.$font = $('\\n        <i class=\\'iconfont icon-fullscreen\\' />\\n    ');\n        this.$elem.append(this.$font);\n        this.isFull = false;\n        this.type = 'click';\n\n        video.$fullFont = this.$font;\n    }\n\n    // 修改原型\n    FullScreen.prototype = {\n        constructor: FullScreen,\n\n        // 点击事件\n        onClick: function onClick() {\n            var _video = video,\n                E = _video.E;\n\n            E.fullScreen();\n        }\n    };\n\n    /**\n     * controls - progressBar\n     * 进度条\n     */\n\n    // 构造函数\n    /**\n     * \n     * @param {Object} video \n     * video 对象\n     */\n    function ProgressBar(video) {\n        this.video = video;\n        this.$elem = $('\\n        <div class=\\'l-c-progressBar\\'></div>\\n    ');\n    }\n    // 修改原型\n    ProgressBar.prototype = {\n        constructor: ProgressBar\n    };\n\n    /**\n     * 所有控制器操作的汇总\n     */\n\n    // 存储控制器的构造函数\n    var ControlsConstructors = {};\n    ControlsConstructors.playCon = PlayCon;\n    ControlsConstructors.voice = Voice;\n    ControlsConstructors.timeText = TimeText;\n    ControlsConstructors.loop = Loop;\n    ControlsConstructors.speed = Speed;\n    ControlsConstructors.fullScreen = FullScreen;\n    ControlsConstructors.progressBar = ProgressBar;\n\n    /**\n     * 公共库\n     */\n\n    function objForEach(obj, fn) {\n        var key = void 0,\n            result = void 0;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                result = fn.call(obj, key, obj[key]);\n                if (result === false) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * \n     * 控制器集合\n     * \n     */\n\n    //  控制器构造函数\n    function Controls(video) {\n        this.video = video;\n        this.controls = {};\n    }\n    // 原型\n    Controls.prototype = {\n        constructor: Controls,\n\n        // 初始化控制器\n        init: function init() {\n            var _this = this;\n\n            var video = this.video;\n            var config = video.config || {};\n            var configControls = config.controls || [];\n\n            // 根据配置信息 创建控制器\n            configControls.forEach(function (controlsKey) {\n                var ControlsConstructor = ControlsConstructors[controlsKey];\n                if (typeof ControlsConstructor === 'function' && ControlsConstructor) {\n                    // 创建单个控制器\n                    _this.controls[controlsKey] = new ControlsConstructor(video);\n                }\n            });\n\n            // 添加到控制器\n            this._addToControlBar();\n\n            // 绑定事件\n            this._bindEvent();\n        },\n\n        // 添加到控制器\n        _addToControlBar: function _addToControlBar() {\n            var video = this.video;\n            var $videoControls = video.$controlsBar;\n            var controls = this.controls;\n            var $controlsMain = $('<div></div>');\n            var $controlsProgress = $('<div></div>');\n            $videoControls.append($controlsProgress);\n            $videoControls.append($controlsMain);\n            $controlsProgress.addClass('l-c-controlsProgress');\n            $controlsMain.addClass('l-c-controlsMain');\n            objForEach(controls, function (key, control) {\n                var $elem = control.$elem;\n                if ($elem) {\n                    $controlsProgress.append($elem);\n                }\n                if (key === 'progressBar') ; else {\n                    $controlsMain.append($elem);\n                }\n            });\n        },\n\n        // 绑定事件\n        _bindEvent: function _bindEvent() {\n            var controls = this.controls;\n            var video = this.video;\n            objForEach(controls, function (key, control) {\n                var type = control.type;\n\n                if (!type) return;\n\n                var $elem = control.$elem;\n\n                if (type === 'click' && control.onClick) {\n                    $elem.on('click', function (e) {\n                        control.onClick(e);\n                    });\n                }\n            });\n        }\n    };\n\n    /**\n     * 配置信息\n     */\n\n    var config = {\n        width: null,\n        height: null,\n        // 默认控制器配置\n        controls: ['progressBar', //进度条\n        'playCon', //播放暂停按钮\n        'voice', // 声音控制\n        // 'setting', //设置\n        // 'playMode', //播放方式\n        'timeText', //时间显示\n        'loop', //循环\n        'speed', //播放速度设置\n        'fullScreen'],\n        url: null,\n        title: null\n    };\n\n    /**\n     * \n     *  video插件构造函数\n     * \n     */\n\n    // id 累加\n    var videoId = 1;\n\n    function Video(selector, config) {\n        if (selector == null) {\n            throw new Error('错误: 初始化video时未传入参数!');\n        }\n        // 每创建一个新的video id累加 用来判断单个页面不同的video对象\n        this.id = 'liangeVideo-' + videoId++;\n        this.E = E(this);\n\n        this.selector = selector;\n        this.config = config;\n        this.$selector = $(selector);\n    }\n    Video.prototype = {\n\n        // 初始化配置\n        _initConfig: function _initConfig() {\n            var target = {};\n            var $selector = this.$selector;\n            this.config = Object.assign(target, config, this.config);\n            var _config2 = this.config,\n                width = _config2.width,\n                height = _config2.height;\n\n            // 设置播放器的宽度\n\n            if (width !== null) {\n                //如果用户配置了宽度\n                if (width <= 350) {\n                    // 播放器的最小宽度是350\n                    width = 350;\n                }\n            } else {\n                // 如果用户没有配置宽度 则默认为700\n                width = 700;\n            }        // 设置播放器的高度\n            if (height !== null) {\n                if (height <= 200) {\n                    // 如果用户配置了高度\n                    // 播放器的最小高度为200\n                    height = 200;\n                }\n            } else {\n                // 如果用户没有配置高度 则默认为200\n                height = 480;\n            }\n            // 将配置配置到播放器上\n            $selector.css('width', width + 'px').css('height', height + 'px');\n        },\n\n        // 初始化DOM\n        _initDom: function _initDom() {\n            var _this = this;\n\n            var $selector = this.$selector;\n            var config = this.config;\n\n            var $controlsBar = void 0,\n                $videoElm = void 0,\n                $titleElm = void 0;\n            // 创建控制器\n            $controlsBar = $('<div></div>');\n            // 创建video播放器\n            $videoElm = $('<video src=' + config.url + '></video>');\n            // 如果需要标题 则创建标题\n            if (config.title !== null) {\n                $titleElm = $('<div>\\n                <p>' + config.title + '</p>\\n            </div>');\n                $selector.append($titleElm);\n                $titleElm.addClass('l-title');\n                this.$titleElm = $titleElm;\n            }\n\n            // 将控制器和播放器添加到dom上\n            $selector.append($controlsBar).append($videoElm);\n\n            // 添加class\n            $controlsBar.addClass('l-c-controlsBar');\n            $videoElm.addClass('l-video');\n\n            // 保存属性\n            this.$controlsBar = $controlsBar;\n            this.$videoElm = $videoElm;\n            this.$selector = $selector;\n\n            // 绑定事件\n            $videoElm.on('click', function () {\n                _this.E.play();\n            });\n            $videoElm.on('dblclick', function () {\n                _this.E.fullScreen();\n            });\n            window.addEventListener('keydown', function (e) {\n                var keyCode = e.keyCode;\n\n                if (keyCode === 32) {\n                    _this.E.play();\n                }\n            });\n        },\n\n        // 初始化video\n        _initVideo: function _initVideo() {\n            this.videoEl = new VideoDom(this);\n            this.videoEl._init();\n        },\n\n        // 初始化控制器\n        _initControls: function _initControls() {\n            this.controls = new Controls(this);\n            this.controls.init();\n        },\n\n        // 创建video\n        create: function create() {\n            // 初始化配置\n            this._initConfig();\n            // 初始化DOM\n            this._initDom();\n            // 初始化video\n            this._initVideo();\n            // 初始化控制器\n            this._initControls();\n        }\n    };\n\n    try {\n        document;\n    } catch (error) {\n        throw new Error('请在浏览器环境下运行');\n    }\n    var index = window.liangeVideoJs || Video;\n\n    return index;\n\n})));\n"]}