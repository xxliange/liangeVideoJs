{"version":3,"sources":["liangeVideoJs.js"],"names":["global","factory","exports","module","define","amd","self","liangeVideoJs","this","querySelectorAll","selector","result","document","HTMLCollection","NodeList","DomElement","html","div","nodeType","selectorResult","replace","trim","indexOf","createElement","innerHTML","children","length","i","$","VideoDom","video","PlayCon","text","$elem","$text","append","innerText","isPlay","type","prototype","forEach","fn","elem","call","on","types","split","addEventListener","e","target","matches","addClass","className","arr","filter","item","push","join","$children","child","appendChild","play","pause","_init","$videoElm","_videoLoad","constructor","onClick","ControlsConstructors","objForEach","obj","key","hasOwnProperty","Controls","controls","playCon","init","_this","config","controlsKey","ControlsConstructor","_addToControlBar","_bindEvent","$videoControls","$controlsBar","control","url","title","videoId","Video","Error","id","_initConfig","Object","assign","_initDom","$selectore","$titleElm","_initVideo","videoEl","_initControls","create","error","style","getElementsByTagName","window"],"mappings":"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","file":"liangeVideoJs.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = global || self, global.liangeVideoJs = factory());\n}(this, (function () { 'use strict';\n\n    /**\n     * \n     * DOM 操作\n     * \n     */\n\n    function createElemByHTML(html) {\n        var div = void 0;\n        div = document.createElement('div');\n        div.innerHTML = html;\n        return div.children;\n    }\n\n    // 判断是否是domList\n    function isDomList(selector) {\n        if (!selector) return false;\n        if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n            return true;\n        }\n        return false;\n    }\n\n    // 元素选择器\n    function querySelectorAll(selector) {\n        var result = document.querySelectorAll(selector);\n        if (isDomList(result)) {\n            return result;\n        } else {\n            return [result];\n        }\n    }\n\n    // 创建构造函数\n\n    function DomElement(selector) {\n\n        if (!selector) return;\n\n        // selector 本来就是DomElement对象 直接返回\n        if (selector instanceof DomElement) return selector;\n\n        this.selector = selector;\n        var nodeType = selector.nodeType;\n\n        // 根据selector 得出的结果 (如 DOM DOM list)\n        var selectorResult = [];\n        if (nodeType === 9) {\n            // document 节点\n            selectorResult = [selector];\n        } else if (nodeType === 1) {\n            // 单个dom节点\n            selectorResult = [selector];\n        } else if (typeof selector === 'string') {\n            // 字符串\n            selector = selector.replace('/\\n/mg', '').trim(); //字符串去空\n            if (selector.indexOf('<') === 0) {\n                // 比如<div>\n                selectorResult = createElemByHTML(selector);\n            } else {\n                // 如 # . 选择器\n                selectorResult = querySelectorAll(selector);\n            }    }\n        var length = selectorResult.length;\n        if (!length) return this; //空数组\n\n        for (var i = 0; i < length; i++) {\n            this[i] = selectorResult[i];\n        }    this.length = length;\n    }\n    DomElement.prototype = {\n\n        forEach: function forEach(fn) {\n            for (var i = 0; i < this.length; i++) {\n                var elem = this[i];\n                var result = fn.call(elem, elem, i);\n                if (result === false) {\n                    break;\n                }\n            }        return this;\n        },\n\n        // 绑定事件\n        on: function on(type, selector, fn) {\n            if (!fn) {\n                fn = selector;\n                selector = null;\n            }\n            // type是否有多个\n            var types = [];\n            types = type.split(/\\s+/);\n\n            return this.forEach(function (elem) {\n                types.forEach(function (type) {\n                    if (!type) return;\n                    if (!selector) {\n                        elem.addEventListener(type, fn);\n                        return;\n                    }\n\n                    elem.addEventListener(type, function (e) {\n                        var target = e.target;\n                        if (target.matches(selector)) {\n                            fn.call(target, e);\n                        }\n                    });\n                });\n            });\n        },\n\n        // 获取子节点\n        children: function children() {\n            var elem = this[0];\n            if (!elem) {\n                return null;\n            }        return $(elem.children);\n        },\n\n        // 添加class\n        addClass: function addClass(className) {\n            if (!className) return this;\n            return this.forEach(function (elem) {\n                var arr = void 0;\n                if (elem.className) {\n                    arr = elem.className.split(/\\s/);\n                    arr = arr.filter(function (item) {\n                        return !!item.trim();\n                    });\n                    if (arr.indexOf(className) < 0) {\n                        arr.push(className);\n                    }                elem.className = arr.join(' ');\n                } else {\n                    elem.className = className;\n                }\n            });\n        },\n\n        // 添加子节点\n        append: function append($children) {\n            return this.forEach(function (elem) {\n                $children.forEach(function (child) {\n                    elem.appendChild(child);\n                });\n            });\n        },\n\n        innerText: function innerText(text) {\n            return this.forEach(function (elem) {\n                if (!text) return;\n                elem.innerText = text;\n            });\n        },\n\n        // 视频播放\n        play: function play() {\n            return this.forEach(function (elem) {\n                elem.play();\n            });\n        },\n\n        // 视频暂停\n        pause: function pause() {\n            return this.forEach(function (elem) {\n                elem.pause();\n            });\n        }\n    };\n\n    function $(selector) {\n        return new DomElement(selector);\n    }\n\n    /**\n     *  video 元素\n     */\n\n    function VideoDom(video) {\n        this.video = video;\n    }\n    VideoDom.prototype = {\n        _init: function _init() {\n            var video = this.video;\n            var $videoElm = video.$videoElm;\n\n            var videoEvent = $videoElm[0];\n            $videoElm.on('loadedmetadata', this._videoLoad);\n        },\n\n        _videoLoad: function _videoLoad() {}\n\n    };\n\n    /**\n     * controls - playCon \n     * 播放暂停按钮\n     */\n\n    //  构造函数\n    function PlayCon(video) {\n        this.video = video;\n        this.text = '播放';\n        this.$elem = $('\\n        <div class=\\'l-c-playCon\\'>\\n\\n        </div>\\n    ');\n        this.$text = $('<p></p>');\n        this.$elem.append(this.$text);\n        this.$text.innerText(this.text);\n        this.isPlay = false;\n        this.type = 'click';\n    }\n    // 修改原型\n    PlayCon.prototype = {\n\n        constructor: PlayCon,\n\n        // 点击事件\n        onClick: function onClick() {\n            var video = this.video,\n                isPlay = this.isPlay,\n                text = this.text;\n            var $videoElm = video.$videoElm;\n\n            if (isPlay) {\n                text = '播放';\n                $videoElm.pause();\n                this.isPlay = false;\n            } else {\n                text = '暂停';\n                $videoElm.play();\n                this.isPlay = true;\n            }        this.$text.innerText(text);\n            video.isPlay = isPlay;\n        }\n    };\n\n    /**\n     * 所有控制器操作的汇总\n     */\n\n    // 存储控制器的构造函数\n    var ControlsConstructors = {};\n    ControlsConstructors.playCon = PlayCon;\n\n    /**\n     * 公共库\n     */\n\n    function objForEach(obj, fn) {\n        var key = void 0,\n            result = void 0;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                result = fn.call(obj, key, obj[key]);\n                if (result === false) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * \n     * 控制器集合\n     * \n     */\n\n    //  控制器构造函数\n    function Controls(video) {\n        this.video = video;\n        this.controls = {};\n    }\n    // 原型\n    Controls.prototype = {\n        constructor: Controls,\n\n        // 初始化控制器\n        init: function init() {\n            var _this = this;\n\n            var video = this.video;\n            var config = video.config || {};\n            var configControls = config.controls || [];\n\n            // 根据配置信息 创建控制器\n            configControls.forEach(function (controlsKey) {\n                var ControlsConstructor = ControlsConstructors[controlsKey];\n                if (typeof ControlsConstructor === 'function' && ControlsConstructor) {\n                    // 创建单个控制器\n                    _this.controls[controlsKey] = new ControlsConstructor(video);\n                }\n            });\n\n            // 添加到控制器\n            this._addToControlBar();\n\n            // 绑定事件\n            this._bindEvent();\n        },\n\n        // 添加到控制器\n        _addToControlBar: function _addToControlBar() {\n            var video = this.video;\n            var $videoControls = video.$controlsBar;\n            var controls = this.controls;\n            objForEach(controls, function (key, control) {\n                var $elem = control.$elem;\n                if ($elem) {\n                    $videoControls.append($elem);\n                }\n            });\n        },\n\n        // 绑定事件\n        _bindEvent: function _bindEvent() {\n            var controls = this.controls;\n            var video = this.video;\n            objForEach(controls, function (key, control) {\n                var type = control.type;\n\n                if (!type) return;\n\n                var $elem = control.$elem;\n\n                if (type === 'click' && control.onClick) {\n                    $elem.on('click', function (e) {\n                        control.onClick(e);\n                    });\n                }\n            });\n        }\n    };\n\n    /**\n     * 配置信息\n     */\n\n    var config = {\n\n        // 默认控制器配置\n        controls: ['progressBar', //进度条\n        'playCon', //播放暂停按钮\n        'voice', // 声音控制\n        // 'setting', //设置\n        'speed', //播放速度设置\n        // 'playMode', //播放方式\n        'fullScreen', //全屏\n        'loop', //循环\n        'timeText'],\n        url: null,\n        title: null\n    };\n\n    /**\n     * \n     *  video插件构造函数\n     * \n     */\n\n    // id 累加\n    var videoId = 1;\n\n    function Video(selector, config) {\n        if (selector == null) {\n            throw new Error('错误: 初始化video时未传入参数!');\n        }\n        // 每创建一个新的video id累加 用来判断单个页面不同的video对象\n        this.id = 'liangeVideo-' + videoId++;\n\n        this.selector = selector;\n        this.config = config;\n    }\n    Video.prototype = {\n\n        // 初始化配置\n        _initConfig: function _initConfig() {\n            var target = {};\n            this.config = Object.assign(target, config, this.config);\n        },\n\n        // 初始化DOM\n        _initDom: function _initDom() {\n            var selector = this.selector;\n            var $selectore = $(selector);\n            var config = this.config;\n\n            var $controlsBar = void 0,\n                $videoElm = void 0,\n                $titleElm = void 0;\n            // 创建控制器\n            $controlsBar = $('<div></div>');\n            // 创建video播放器\n            $videoElm = $('<video src=' + config.url + '></video>');\n            // 如果需要标题 则创建标题\n            if (config.title !== null) {\n                $titleElm = $('<div>\\n                <p>' + config.title + '</p>\\n            </div>');\n                $selectore.append($titleElm);\n                $titleElm.addClass('l-title');\n                this.$titleElm = $titleElm;\n            }\n\n            // 将控制器和播放器添加到dom上\n            $selectore.append($controlsBar).append($videoElm);\n\n            // 添加class\n            $controlsBar.addClass('l-c-controlsBar');\n            $videoElm.addClass('l-video');\n\n            // 保存属性\n            this.$controlsBar = $controlsBar;\n            this.$videoElm = $videoElm;\n        },\n\n        // 初始化video\n        _initVideo: function _initVideo() {\n            this.videoEl = new VideoDom(this);\n            this.videoEl._init();\n        },\n\n        // 初始化控制器\n        _initControls: function _initControls() {\n            this.controls = new Controls(this);\n            this.controls.init();\n        },\n\n        // 创建video\n        create: function create() {\n            // 初始化配置\n            this._initConfig();\n            // 初始化DOM\n            this._initDom();\n            // 初始化video\n            this._initVideo();\n            // 初始化控制器\n            this._initControls();\n        }\n    };\n\n    try {\n        document;\n    } catch (error) {\n        throw new Error('请在浏览器环境下运行');\n    }\n    var inlineCss = '*{    margin: 0;    padding: 0;    color: #000;}.video{    width: 700px;    height: 480px;    display: -webkit-box;    display: flex;    align-content: center;    -webkit-box-pack: center;            justify-content: center;    position: relative;    margin: 10px auto;}.l-video{    width: 100%;    height: 100%;    background-color: #000;}.video .l-title{    width: 100%;    box-sizing: border-box;    padding: 20px 20px;    position: absolute;    top: 0;    left: 0;    background:-webkit-gradient(linear, left top, left bottom, from(rgba(43,51,63,.7)), to(rgba(0,0,0,0.3)));    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\\'#4c000000\\', endColorstr=\\'#4c000000\\');    background:linear-gradient(to bottom, rgba(43,51,63,.7), rgba(0,0,0,0.3));    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\\'#4c000000\\', endColorstr=\\'#4c000000\\');    z-index: 9;}:root .video .l-title{    filter: none\\\\9;}:root .video .l-title{    filter: none\\\\9;}.video .l-title p{    font-size: 16px;    font-weight: 500;    color: #fff;    overflow: hidden;    white-space: nowrap;    text-overflow: ellipsis;}.video .l-c-controlsBar{    width: 100%;    padding: 20px 10px;    box-sizing: border-box;    background:-webkit-gradient(linear, left bottom, left top, from(rgba(43,51,63,.7)), to(rgba(0,0,0,0.3)));    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\\'#4c000000\\', endColorstr=\\'#4c000000\\');    background:linear-gradient(to top, rgba(43,51,63,.7), rgba(0,0,0,0.3));    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\\'#4c000000\\', endColorstr=\\'#4c000000\\');    position: absolute;    bottom: 0;    left: 0;    z-index: 9;}:root .video .l-c-controlsBar{    filter: none\\\\9;}:root .video .l-c-controlsBar{    filter: none\\\\9;}.video .l-c-controlsBar .l-c-playCon{    width: 40px;    height: 40px;    line-height: 40px;    text-align: center;    background:#fff;    border-radius: 100%;    cursor: pointer;    -webkit-user-select: none;       -moz-user-select: none;        -ms-user-select: none;            user-select: none;}.video .l-c-controlsBar .l-c-playCon p{    color: #000;    font-size: 12px;}',\n        style = document.createElement('style');\n    style.type = 'text/css';\n    style.innerHTML = inlineCss;\n    document.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n    var index = window.liangeVideoJs || Video;\n\n    return index;\n\n})));\n"]}